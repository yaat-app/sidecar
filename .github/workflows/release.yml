name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install system dependencies
        run: sudo apt-get update && sudo apt-get install -y libsystemd-dev

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Run tests
        run: go test -v ./...

  build:
    name: Build Binaries
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          # Linux
          - goos: linux
            goarch: amd64
            output: yaat-sidecar-linux-amd64
            requires_cgo: true
          - goos: linux
            goarch: arm64
            output: yaat-sidecar-linux-arm64
            requires_cgo: true

          # macOS
          - goos: darwin
            goarch: amd64
            output: yaat-sidecar-darwin-amd64
            requires_cgo: false
          - goos: darwin
            goarch: arm64
            output: yaat-sidecar-darwin-arm64
            requires_cgo: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install system dependencies (linux only)
        if: ${{ matrix.requires_cgo == true }}
        run: sudo apt-get update && sudo apt-get install -y libsystemd-dev pkg-config

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Build binary
        run: |
          if [ "${{ matrix.requires_cgo }}" = "true" ]; then
            export CGO_ENABLED=1
          else
            export CGO_ENABLED=0
          fi
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -ldflags="-w -s -X main.version=${{ github.ref_name }}" -o ${{ matrix.output }} ./cmd

      - name: Create tarball
        run: |
          tar -czf ${{ matrix.output }}.tar.gz \
            ${{ matrix.output }} \
            yaat.yaml.example \
            README.md \
            install.sh
          sha256sum ${{ matrix.output }}.tar.gz > ${{ matrix.output }}.tar.gz.sha256

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.output }}
          path: |
            ${{ matrix.output }}*

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -R artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            artifacts/**/*.tar.gz
            artifacts/**/*.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
