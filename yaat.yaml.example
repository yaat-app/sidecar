# YAAT Sidecar Configuration Example
# Copy this file to yaat.yaml and configure for your environment

# Your YAAT organization ID (optional - required only for cloud mode)
# Get this from: https://yaat.io → Settings → Organization
# Leave empty for local-only mode (offline analytics)
organization_id: "org_xxxxxxxxxxxxxxxxxxxxx"

# Your YAAT organization API key (optional - required only for cloud mode)
# Get this from your YAAT dashboard
# Leave empty for local-only mode (100% offline with DuckDB analytics)
api_key: "yaat_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"

# Service name (required)
# This identifies your service in the YAAT dashboard
service_name: "api-server"

# Environment (optional, default: production)
# e.g., production, staging, development
environment: "production"

# HTTP Proxy Configuration
proxy:
  # Enable HTTP traffic monitoring
  enabled: true

  # Port for sidecar to listen on
  listen_port: 19000

  # Your application's actual port
  # Sidecar will forward all traffic here
  upstream_url: "http://127.0.0.1:8000"

# Log File Monitoring
# Add multiple log files to monitor
logs:
  # Django application logs
  - path: "/var/log/myapp/app.log"
    format: "django"  # django, nginx, or json

  # Nginx access logs
  - path: "/var/log/nginx/access.log"
    format: "nginx"

  # Docker/Kubernetes container stdout (JSON envelope)
  - path: "/var/lib/docker/containers/<container-id>/<container-id>-json.log"
    format: "docker"

  # Add more log files as needed
  # - path: "/var/log/myapp/errors.log"
  #   format: "json"

# Scrubbing rules (mask secrets before shipping events)
scrubbing:
  enabled: true
  rules:
    - name: "Mask Authorization bearer tokens"
      pattern: "(?i)(authorization:?\\s*bearer\\s+)[A-Za-z0-9._~-]+"
      replacement: "$1[REDACTED]"
      fields: ["message", "stacktrace", "tags.authorization"]
    - name: "Mask email addresses"
      pattern: "(?i)[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}"
      replacement: "[EMAIL]"
      fields: ["message", "stacktrace", "tags.*"]

# Event buffering configuration
# Buffer size (number of events)
buffer_size: 1000

# How often to flush events to YAAT API
# Format: 10s, 1m, 30s, etc.
flush_interval: "10s"

# Host metrics & StatsD listener
metrics:
  enabled: false
  interval: "30s"
  tags: {}
  statsd:
    enabled: false
    listen_addr: ":8125"
    namespace: ""
    tags: {}

# Local Analytics (DuckDB embedded database)
# KILLER FEATURE: Store and query events locally with SQL
# Two modes:
#   1. Cloud + Local: api_key set → dual-write to cloud API + local DB
#   2. Local-Only: api_key empty → 100% offline, no cloud dependency
analytics:
  enabled: true
  database_path: "/var/lib/yaat/analytics.db"  # Linux default
  retention_days: 14  # Automatic cleanup after 14 days
  max_size_gb: 2.0  # Max database size (aggressive cleanup when exceeded)
  batch_size: 100  # Events per write batch
  write_timeout: "5s"  # Timeout for database writes

# YAAT API endpoint (optional - only used when api_key is set)
# Production: https://yaat.io/api/v1/ingest
# Staging: https://staging.yaat.io/api/v1/ingest
# Development: http://localhost:8000/api/v1/ingest
api_endpoint: "https://yaat.io/api/v1/ingest"
